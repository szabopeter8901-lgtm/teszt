import streamlit as st
import pandas as pd
import os
from datetime import datetime

st.set_page_config(page_title="Munkaruha Nyilv√°ntart√≥", layout="wide")
st.title("üëï Munkaruha Nyilv√°ntart√≥ Rendszer")

# --- F√°jlnevek ---
DATA_FILE = "raktar_adatok.csv"
NAPLO_FILE = "kiadas_naplo.csv"

# --- Bet√∂lt√©s ---
if os.path.exists(DATA_FILE):
    raktar_df = pd.read_csv(DATA_FILE)
else:
    raktar_df = pd.DataFrame(columns=["T√≠pus", "M√©ret", "Mennyis√©g"])

if os.path.exists(NAPLO_FILE):
    naplo_df = pd.read_csv(NAPLO_FILE)
else:
    naplo_df = pd.DataFrame(columns=["D√°tum", "Dolgoz√≥", "T√≠pus", "M√©ret", "Mennyis√©g"])

if "raktar" not in st.session_state:
    st.session_state.raktar = raktar_df
if "naplo" not in st.session_state:
    st.session_state.naplo = naplo_df

MIN_KESZLET = 5

# --- Ment√©s seg√©df√ºggv√©nyek ---
def mentes_raktar():
    st.session_state.raktar.to_csv(DATA_FILE, index=False)

def mentes_naplo():
    st.session_state.naplo.to_csv(NAPLO_FILE, index=False)

# --- Oldalv√°laszt√°s ---
menu = st.sidebar.radio("V√°lasszon oldalt:", ["üì¶ Rakt√°rkezel√©s", "üßæ Kiad√°si napl√≥"])

# --- Sidebar: Leg√∂rd√ºl≈ë men√ºk szerkeszt√©se ---
st.sidebar.header("üõ† Leg√∂rd√ºl≈ë men√ºk szerkeszt√©se")

# T√≠pusok szerkeszt√©se
tipus_lista = st.session_state.raktar["T√≠pus"].unique().tolist()
uj_tipus = st.sidebar.text_input("√öj t√≠pus hozz√°ad√°sa")
if st.sidebar.button("T√≠pus hozz√°ad√°sa"):
    if uj_tipus and uj_tipus not in tipus_lista:
        st.session_state.raktar = pd.concat(
            [st.session_state.raktar, pd.DataFrame({"T√≠pus": [uj_tipus], "M√©ret": [""], "Mennyis√©g": [0]})],
            ignore_index=True
        )
        mentes_raktar()
        st.sidebar.success(f"{uj_tipus} hozz√°adva a t√≠pusokhoz!")

# Dolgoz√≥k szerkeszt√©se
dolgozo_lista = st.session_state.naplo["Dolgoz√≥"].unique().tolist()
uj_dolgozo = st.sidebar.text_input("√öj dolgoz√≥ hozz√°ad√°sa")
if st.sidebar.button("Dolgoz√≥ hozz√°ad√°sa"):
    if uj_dolgozo and uj_dolgozo not in dolgozo_lista:
        st.session_state.naplo = pd.concat(
            [st.session_state.naplo, pd.DataFrame({"D√°tum": [""], "Dolgoz√≥": [uj_dolgozo], "T√≠pus": [""], "M√©ret": [""], "Mennyis√©g": [0]})],
            ignore_index=True
        )
        mentes_naplo()
        st.sidebar.success(f"{uj_dolgozo} hozz√°adva a dolgoz√≥khoz!")

# --- RAKT√ÅRKEZEL√âS ---
if menu == "üì¶ Rakt√°rkezel√©s":
    st.header("üì¶ Rakt√°rkezel√©s")

    # Bevitel
    with st.form("bevetel_form"):
        st.subheader("√öj ruha bevitele")
        col1, col2, col3 = st.columns(3)
        tipus = col1.text_input("T√≠pus")
        meret = col2.text_input("M√©ret")
        menny = col3.number_input("Mennyis√©g", min_value=1, value=1)
        hozzaad_btn = st.form_submit_button("Bevitel")

        if hozzaad_btn:
            if tipus and meret:
                df = st.session_state.raktar
                mask = (df["T√≠pus"] == tipus) & (df["M√©ret"] == meret)
                if mask.any():
                    df.loc[mask, "Mennyis√©g"] += menny
                else:
                    new_row = pd.DataFrame({"T√≠pus": [tipus], "M√©ret": [meret], "Mennyis√©g": [menny]})
                    st.session_state.raktar = pd.concat([df, new_row], ignore_index=True)
                mentes_raktar()
                st.success(f"{menny} db {tipus} ({meret}) hozz√°adva.")
            else:
                st.error("T√∂ltse ki a t√≠pus √©s m√©ret mez≈ëket!")

    # Kiad√°s
    with st.form("kiadas_form"):
        st.subheader("Ruha kiad√°sa")
        col1, col2, col3, col4 = st.columns(4)

        # Dolgoz√≥ leg√∂rd√ºl≈ë
        dolgozok = [d for d in st.session_state.naplo["Dolgoz√≥"].unique() if d]  # csak nem √ºres
        dolgozo = col1.selectbox("Dolgoz√≥ neve (k√∂telez≈ë)", options=dolgozok)

        # T√≠pus leg√∂rd√ºl≈ë
        tipusok = st.session_state.raktar["T√≠pus"].unique().tolist()
        tipus_k = col2.selectbox("T√≠pus", options=tipusok)

        # M√©ret leg√∂rd√ºl≈ë a kiv√°lasztott t√≠pushoz
        meretek = st.session_state.raktar[st.session_state.raktar["T√≠pus"] == tipus_k]["M√©ret"].unique().tolist()
        meret_k = col3.selectbox("M√©ret", options=meretek)

        menny_k = col4.number_input("Mennyis√©g", min_value=1, value=1)
        kiad_btn = st.form_submit_button("Kiad√°s")

        if kiad_btn:
            if not dolgozo.strip():
                st.error("Adja meg a dolgoz√≥ nev√©t!")
            else:
                df = st.session_state.raktar
                mask = (df["T√≠pus"] == tipus_k) & (df["M√©ret"] == meret_k)
                if mask.any():
                    idx = df.index[mask][0]
                    if df.loc[idx, "Mennyis√©g"] >= menny_k:
                        df.loc[idx, "Mennyis√©g"] -= menny_k
                        if df.loc[idx, "Mennyis√©g"] == 0:
                            df = df.drop(idx)
                        st.session_state.raktar = df.reset_index(drop=True)
                        mentes_raktar()

                        # Napl√≥z√°s
                        uj_sor = pd.DataFrame({
                            "D√°tum": [datetime.now().strftime("%Y-%m-%d %H:%M:%S")],
                            "Dolgoz√≥": [dolgozo],
                            "T√≠pus": [tipus_k],
                            "M√©ret": [meret_k],
                            "Mennyis√©g": [menny_k]
                        })
                        st.session_state.naplo = pd.concat([st.session_state.naplo, uj_sor], ignore_index=True)
                        mentes_naplo()

                        st.success(f"{dolgozo} sz√°m√°ra {menny_k} db {tipus_k} ({meret_k}) kiadva.")
                    else:
                        st.error("Nincs elegend≈ë k√©szlet!")
                else:
                    st.error("Nincs ilyen t√≠pus√∫ √©s m√©ret≈± ruha a rakt√°rban!")

    # Rakt√°rk√©szlet megjelen√≠t√©s
    st.subheader("üìä Aktu√°lis rakt√°rk√©szlet")
    df = st.session_state.raktar.copy()

    if not df.empty:
        def highlight_min(s):
            return ["background-color: #FFCCCC" if v < MIN_KESZLET else "background-color: #CCFFCC" for v in s]

        styled = df.style.apply(highlight_min, subset=["Mennyis√©g"])
        st.dataframe(styled, use_container_width=True)

        st.download_button("üíæ Rakt√°r export√°l√°sa CSV-be", data=df.to_csv(index=False), file_name="raktar_export.csv")
    else:
        st.info("Nincs adat a rakt√°rban.")

# --- KIAD√ÅSI NAPL√ì ---
elif menu == "üßæ Kiad√°si napl√≥":
    st.header("üßæ Kiad√°si napl√≥ dolgoz√≥nk√©nt √©s id≈ëszak szerint")
    naplo = st.session_state.naplo.copy()

    if not naplo.empty:
        # D√°tum form√°tum konverzi√≥
        naplo["D√°tum"] = pd.to_datetime(naplo["D√°tum"], errors='coerce')

        # Sz≈±r≈ëk
        dolgozok = ["(√∂sszes)"] + sorted([d for d in naplo["Dolgoz√≥"].dropna() if d])
        col1, col2, col3 = st.columns(3)
        valasztott = col1.selectbox("Dolgoz√≥ kiv√°laszt√°sa:", dolgozok)
        datum_tol = col2.date_input("D√°tumt√≥l", value=naplo["D√°tum"].min().date() if not naplo.empty else datetime.today().date())
        datum_ig = col3.date_input("D√°tumig", value=datetime.today().date())

        # Sz≈±r√©s dolgoz√≥ra √©s id≈ëszakra
        if valasztott != "(√∂sszes)":
            naplo = naplo[naplo["Dolgoz√≥"] == valasztott]
        naplo = naplo[(naplo["D√°tum"].dt.date >= datum_tol) & (naplo["D√°tum"].dt.date <= datum_ig)]

        st.dataframe(naplo.sort_values("D√°tum", ascending=False), use_container_width=True)

        # √ñsszes√≠t≈ë statisztika
        st.subheader("üìà √ñsszes√≠t≈ë statisztika dolgoz√≥nk√©nt")
        osszesito = naplo.groupby("Dolgoz√≥")["Mennyis√©g"].sum().reset_index().rename(columns={"Mennyis√©g": "√ñsszes kiadott darab"})
        st.dataframe(osszesito, use_container_width=True)

        # T√≠pusonk√©nti bont√°s pivot t√°bl√°val
        st.subheader("üëï T√≠pusonk√©nti bont√°s dolgoz√≥nk√©nt")
        pivot = naplo.pivot_table(index="Dolgoz√≥", columns="T√≠pus", values="Mennyis√©g", aggfunc="sum", fill_value=0)
        pivot["√ñsszesen"] = pivot.sum(axis=1)
        st.dataframe(pivot, use_container_width=True)

        st.download_button("üíæ Napl√≥ export√°l√°sa CSV-be", data=naplo.to_csv(index=False), file_name="kiadas_naplo_szurt.csv")
        st.download_button("üíæ T√≠pusonk√©nti statisztika export√°l√°sa CSV-be", data=pivot.to_csv(), file_name="tipusonk√©nti_statisztika.csv")
    else:
        st.info("M√©g nem t√∂rt√©nt kiad√°s.")
